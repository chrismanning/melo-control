enum Unit {
  Unit
}

type Collection {
  id: CollectionRef!
  rootUri: String!
  name: String!
  watch: Boolean!
  kind: String!
  sources(where: SourceWhere): [Source!]!
  sourceGroups: [SourceGroup!]!
}

type CollectionMutation {
  add(newCollection: NewCollection!): Collection!
  delete(id: CollectionRef!): Unit!
  deleteAll: Unit!
}

scalar CollectionRef

input CollectionWhere {
  id: Where
  rootUri: Where
}

input ContainsExpr {
  contains: String!
}

input EditMetadata {
  metadataTransform: MetadataTransformation!
}

input EqExpr {
  eq: String!
}

type FailedSourceUpdate {
  id: SourceRef!
  msg: String!
}

type GroupTags {
  albumArtist: [String!]
  albumTitle: String
  date: String
  genre: [String!]
  totalTracks: String
  discNumber: String
  totalDiscs: String
  musicbrainzArtistId: [String!]
  musicbrainzAlbumArtistId: [String!]
  musicbrainzAlbumId: String
}

type Image {
  fileName: String!
  downloadUri: String!
}

input InExpr {
  in: [String!]!
}

type LibraryMutation {
  stageSources(uris: [String!]!): StagedSources!
  transformSources(transformations: [Transform!]!, where: SourceWhere): UpdatedSources!
  previewTransformSources(transformations: [Transform!]!, where: SourceWhere): UpdatedSources!
  updateSources(updates: [SourceUpdate!]!): UpdatedSources!
  collection: CollectionMutation!
}

type LibraryQuery {
  sources(where: SourceWhere): [Source!]!
  sourceGroups: [SourceGroup!]!
  collections(where: CollectionWhere): [Collection!]!
}

type MappedTags {
  artistName: [String!]
  trackTitle: String
  albumTitle: String
  date: String
  genre: [String!]
  albumArtist: [String!]
  trackNumber: String
  totalTracks: String
  discNumber: String
  totalDiscs: String
  comment: String
  musicbrainzArtistId: [String!]
  musicbrainzAlbumArtistId: [String!]
  musicbrainzAlbumId: String
  musicbrainzTrackId: String
}

input MappedTagsInput {
  artistName: [String!]
  trackTitle: String
  albumTitle: String
  date: String
  genre: [String!]
  albumArtist: [String!]
  trackNumber: String
  totalTracks: String
  discNumber: String
  totalDiscs: String
  comment: String
  musicbrainzArtistId: [String!]
  musicbrainzAlbumArtistId: [String!]
  musicbrainzAlbumId: String
  musicbrainzTrackId: String
}

type Metadata {
  tags: [Tag!]!
  mappedTags: MappedTags!
  formatId: String!
  format: String!
}

"""
Note! This input is an exclusive object,
i.e., the customer can provide a value for only one field.
"""
input MetadataTransformation {
  SetMapping: SetMapping
  RemoveMappings: RemoveMappings
  Retain: Retain
}

input Move {
  movePattern: String!
}

type Mutation {
  library: LibraryMutation!
}

input NewCollection {
  rootPath: String!
  name: String!
  watch: Boolean!
}

input NotEqExpr {
  notEq: String!
}

type Query {
  library: LibraryQuery!
}

input RemoveMappings {
  mappings: [String!]!
}

input Retain {
  mappings: [String!]!
}

input SetMapping {
  mapping: String!
  values: [String!]!
}

type Source {
  id: SourceRef!
  format: String!
  metadata: Metadata!
  sourceName: String!
  sourceUri: String!
  downloadUri: String!
  length: Float!
  coverImage: Image
}

type SourceGroup {
  groupTags: GroupTags!
  groupParentUri: String!
  sources: [Source!]!
  coverImage: Image
}

scalar SourceRef

input SourceUpdate {
  id: SourceRef!
  updateTags: TagUpdate!
}

input SourceWhere {
  id: Where
  sourceUri: Where
}

input SplitMultiTrackFile {
  movePattern: String!
}

type StagedSources {
  sources: [Source!]!
  groups: [SourceGroup!]!
  numberOfSourcesImported: Int!
}

input StartsWithExpr {
  startsWith: String!
}

type Tag {
  key: String!
  value: String!
}

input TagUpdate {
  setMappedTags: MappedTagsInput
  setTags: [UpdatePair!]
}

"""
Note! This input is an exclusive object,
i.e., the customer can provide a value for only one field.
"""
input Transform {
  Move: Move
  SplitMultiTrackFile: SplitMultiTrackFile
  EditMetadata: EditMetadata
}

type UpdatedSource {
  _0: Source!
}

type UpdatedSources {
  results: [UpdateSourceResult!]!
}

input UpdatePair {
  key: String!
  value: String!
}

union UpdateSourceResult = UpdatedSource | FailedSourceUpdate

"""
Note! This input is an exclusive object,
i.e., the customer can provide a value for only one field.
"""
input Where {
  EqExpr: EqExpr
  NotEqExpr: NotEqExpr
  ContainsExpr: ContainsExpr
  InExpr: InExpr
  StartsWithExpr: StartsWithExpr
}

